# Add tmux things to path
export PATH=$PATH:$HOME/.config/tmux/bin

# LunarVim
export PATH=$PATH:$HOME/.local/bin

# Add Visual Studio Code (code)
export PATH=$PATH:/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin

# Add rust tools to path
export PATH=$PATH:$HOME/.cargo/bin

export PROJ_FILE=$HOME/.config/tmux/projects

export DAP_TEMPLATES=$HOME/.config/dap/templates

function ff {
    tmux-sessionizer
}

function addff {
    # check if input is a directory
    if [ -d "$1" ]; then
        # check if the project file exists
        if ! test -f $PROJ_FILE; then
            echo "Creating $PROJ_FILE"
            touch $PROJ_FILE
        fi

        # check if the project is already in the file
        if grep -q "^$1$" $PROJ_FILE; then
            echo "Project already in $PROJ_FILE"
            return
        fi
        echo "Adding $1 to $PROJ_FILE"
        echo "$1" >> "$PROJ_FILE"
    else
        echo "Not a directory: $1"
    fi
}

function rmff {
    # check if input is a directory
    if [ -d "$1" ]; then
        if test -f $PROJ_FILE; then
            # check if the project is already in the file
            if grep -q "^$1$" $PROJ_FILE; then
                # replace all / in input with \/ to escape them
                echo "Removing $1 from $PROJ_FILE"
                sed -i "" -e "/^${1//\//\\/}$/d" $PROJ_FILE
            else
                echo "Project not in $PROJ_FILE"
                return
            fi
        else
            echo "$PROJ_FILE does not exist"
        fi
    else
        echo "Not a directory: $1"
    fi
}

function createDebugConfig {
    # check if there's an input
    if [ -z "$1" ]; then
        echo "No language specified"
        return
    fi
    # check if the template file exists
    if ! test -f $DAP_TEMPLATES/$1.json; then
        echo "Template file for $1 does not exist"
        return
    fi

    # check if .vscode directory exists
    if ! test -d .vscode; then
        echo "Creating .vscode directory"
        mkdir .vscode
    fi
    # check if launch.json exists in .vscode directory
    if ! test -f .vscode/launch.json; then
        echo "Creating launch.json"
        cp $DAP_TEMPLATES/$1.json .vscode/launch.json
    else
        echo "launch.json already exists"
        return
    fi
}

# Go
export PATH=$PATH:$HOME/go/bin
alias go-coverage="go test -coverprofile=coverage.out ./... && go tool cover -html=coverage.out"

# Set up Node Version Manager (NVM)
export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh

# macro to kill the docker desktop app and the VM (excluding vmnetd -> it's a service)
function kill-docker {
    ps ax|grep -i docker|egrep -iv 'grep|com.docker.vmnetd'|awk '{print $1}'|xargs kill
}

# Better completion
autoload -Uz compinit && compinit
